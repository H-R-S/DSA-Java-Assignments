import java.util.ArrayList;
import java.util.Objects;

class HashNode<K,V > {
	
	K key;
	V value;
	final int hashCode;

	HashNodes<K, V> next;

	public HashNode(K key, V value, int hashCode) {

		this.key= key;
		this.value = value;
		this. hashCode = hashCode;
	}

	class Map<k, v> {
	
		private ArrayList<HashNode<K, V> > bucketArray;
		private int numBuckets;
		private int size;

		public Map() {

			bucketArray= new ArrayList<>();
			numBuckets = 10;
			size = 0;

			for (int i= 0; i<numBuckets; i++)

				bucketArray.add(null);
		}
		
		public int size() { return size; }
		public boolean isEmpty() { return size ()==0;}
		private final int hashCode (K key) {
			
			return Objects.hashCode(key);
		}

		private int getBucketindex(k key) {
			
			int hashCode = hashCode(key);
			int Index= hashCode % numBuckets;
			index= index <0? Index*- 1: index;

			return index;
		}

		public V remove(k key) {

			int bucketndex= getBucketindex(key);
			int hashCode = hashCode(key);
			HashNode<K, V> head = bucketArray.get(bucketIndex);
			HashNode<K,V > prev= null;

			while (head != null) {

				if (head. Key.equals(key) && hashCode==head.hash code)
					break;

				prev= head;
				head= head.next;
			}
			
			if (head == null)

				return null;
			
			Size--;

			if (prev != null) {

				prev.next= head.next;
			}
  			else {

				bucketarray.set(bucketindex, head.next);
				return head value;
  			}
		}

		public V get(k key) {

			int bucketindex= getBucketindex(key);
			int hashCode = hashCode(key);
			HashNode<K, V> head = bucketArray.get(bucketindex);

			while (head != null) {

				if (head .key.equals(key) && head hashCode==hashCode)
					
					return head.value;
				
				head= head.next;
			}

			return null;
		}

		public void add(k key, V value) {

			int bucketindex = getBucketindex(key);
			int hashCode = hashCode(key);
			HashNode<K, V> head = bucketArray.get(bucketindex);

			while (head != null) {

				if (head.key.equals(key) && head.hashCode==hashCode) {

					head.value = value;
					return;
				}
				
				head = head.next;
			}

			size++;
			head = bucketArray.get(bucketindex);
			HashNode<K, V> newNode= new HashNode<K, V> (key, value, hashCode);
			newNode.next= head;
			bucketArray.set(bucketindex, newNode);

			if (1.0* size) / numBuckets >= 0.7) {

				ArrayList<HashNode<K, V> > temp = bucketArray;
				bucketarray= newArrayList<>();
				numBuckets = 2* numBuckets;
				size = 0;

				for (int i=0; i<numBuckets; i++)

					bucketArray.add(null);

				for (HashNode<K, V> headNode : temp) {

					while (headNode != null) {

						add(headNode.key, headNode.value);
						headNode = headNode.next;
					}
				}
			}
		}

		public static void main(String[] args) {

			Map<String, Integer> map = new map<>();
			map.add(“this”, 1);
			map.add(“coder”,2);
			map.add(“this”, 4);
			map.add(“hi”, 5);

			System.out.println(map.size());
			System.out.println(map.remove(“this”));
			System.out.println(map. remove(“this”));
			System.out.println(map.size());
			System.out.println(map.isEmpty());
		}	
	}	
}